In order to enable multi threading on PyQT you must
utilize QRunnable and QThreadpool classes

1. create a QRunnable sub-class

from PyQT5.QtCore import QRunnable

class Worker(QRunnable):
    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()
        self.fn = fn
        self.args = args
        self.kwargs = kwargs
    
    def run(self):
        # Run custom function here
        self.fn(*self.args, **self.kwargs)


class MainWindow(QMainWindow):
    def __init__(self):
    super(MainWindow, self).__init__()
    self.threadpool = QThreadPool()

    b = QPushButton("DANGER!")
    b.pressed.connect(self.oh_no)

    def execute_this_fn(self, n):
        print(f"Hello {n}!")

    def oh_no(self):
        # Pass the function to execute
        worker = Worker(self.execute_this_fn, "Paloloveee")

        # Execute
        self.threadpool.start(worker)



# Sample Code below

from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *

import time


class Worker(QRunnable):
    '''
    Worker thread
    '''

    def __init__(self, fn, *args, **kwargs):
        super(Worker, self).__init__()
        self.fn = fn
        self.args = args
        self.kwargs = kwargs

    @pyqtSlot()
    def run(self):
        '''
        Your code goes in this function
        '''
        self.fn(*self.args, **self.kwargs)


class MainWindow(QMainWindow):

    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.threadpool = QThreadPool()
        print("Multithreading with maximum %d threads" %
              self.threadpool.maxThreadCount())

        self.counter = 0

        layout = QVBoxLayout()

        self.l = QLabel("Start")
        self.k = QLabel("Test")
        b = QPushButton("DANGER!")
        b.pressed.connect(self.oh_no)

        layout.addWidget(self.l)
        layout.addWidget(self.k)
        layout.addWidget(b)

        w = QWidget()
        w.setLayout(layout)

        self.setCentralWidget(w)

        self.show()

        self.timer = QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.recurring_timer)
        self.timer.start()

    def execute_this(self, n):
        self.k.setText(f"Hello {n}")

    def oh_no(self):
        worker = Worker(self.execute_this, "Paloloveee")
        self.threadpool.start(worker)

    def recurring_timer(self):
        self.counter += 1
        self.l.setText("Counter: %d" % self.counter)


app = QApplication([])
window = MainWindow()
app.exec_()
